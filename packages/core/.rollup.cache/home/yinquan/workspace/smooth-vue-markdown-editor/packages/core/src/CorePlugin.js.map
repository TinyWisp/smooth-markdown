{"version":3,"file":"CorePlugin.js","sourceRoot":"","sources":["CorePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CmDomEventHandlerMap, CmDocChanged, MditCodeRendererMap, MditRendererRuleMap, CommandMap, MditLoadPlugin, MditInitOptions } from \"./CoreEditor/types\"\nimport type { Extension as CmExtension } from '@codemirror/state'\nimport type { VNode, UnwrapNestedRefs } from 'vue'\nimport { reactive } from 'vue'\n\n/**\n * prefix 'mdit' indicates that the function/property is related to markdown-it\n * prefix 'cm' indicates that the function/property is related to codemirror\n */\nexport interface CorePlugin {\n  // markdown-it\n  mditInitOptions?: MditInitOptions\n  mditLoadPlugins?: MditLoadPlugin[]\n  mditCodeRendererMap?: MditCodeRendererMap\n  mditRendererRuleMap?: MditRendererRuleMap\n  mditBeforeRender?: () => void\n  mditAfterRender?: () => void\n\n  // codemirror\n  cmDomEventHandlerMap?: CmDomEventHandlerMap\n  cmExtensions?: CmExtension[]\n  cmDocChanged?: CmDocChanged\n  cmMarkdownConfig?: object\n\n  // lifecycle\n  mounted?: () => void\n  beforeDestroy?: () => void\n\n  // others\n  commandMap?: CommandMap\n  extraVnodes?: VNode[]\n}\n\nexport class CorePluginManager {\n  plugins: CorePlugin[]\n\n  constructor() {\n    this.plugins = []\n  }\n\n  /**\n   * register plugins\n   * @param plugins \n   */\n  registerPlugins(plugins: CorePlugin[]) {\n    plugins.forEach((plugin) => {\n      this.registerPlugin(plugin)\n    })\n  }\n\n  /**\n   * register a plugin\n   * @param plugin \n   */\n  registerPlugin(plugin: CorePlugin): void {\n    this.plugins.push(plugin)\n  }\n\n  mditBeforeRender(): void {\n    this.plugins.forEach((plugin) => {\n      plugin.mditBeforeRender && plugin.mditBeforeRender.apply(plugin)\n    })\n  }\n\n  /**\n   * execute every plugin's midtAfterRender method\n   */\n  mditAfterRender(): void {\n    this.plugins.forEach((plugin) => {\n      plugin.mditAfterRender && plugin.mditAfterRender.apply(plugin)\n    })\n  }\n\n  /**\n   * get the merged map of all plugin's midtCodeRendererMap property\n   * @returns \n   */\n  getMditCodeRendererMap(): MditCodeRendererMap {\n    const codeRendererMap: MditCodeRendererMap = {}\n    this.plugins.forEach((plugin) => {\n      if (plugin.mditCodeRendererMap) {\n        for (const lang of Object.keys(plugin.mditCodeRendererMap)) {\n          codeRendererMap[lang] = plugin.mditCodeRendererMap[lang].bind(plugin)\n        }\n      }\n    })\n\n    return codeRendererMap\n  }\n\n  getMditRendererRuleMap(): MditRendererRuleMap {\n    const rendererRuleMap: MditRendererRuleMap = {}\n    this.plugins.forEach((plugin) => {\n      if (plugin.mditRendererRuleMap) {\n        Object.assign(rendererRuleMap, plugin.mditRendererRuleMap)\n      }\n    })\n\n    return rendererRuleMap\n  }\n\n  getMditInitOptions(): MditInitOptions {\n    const options: MditInitOptions = {}\n\n    this.plugins.forEach((plugin) => {\n      if (plugin.mditInitOptions) {\n        Object.assign(options, plugin.mditInitOptions)\n      }\n    })\n\n    return options\n  }\n\n  getMditLoadPlugins(): MditLoadPlugin[] {\n    const loadPlugins: MditLoadPlugin[] = []\n    this.plugins.forEach((plugin) => {\n      if (plugin.mditLoadPlugins) {\n        plugin.mditLoadPlugins.forEach((loadPlugin) => {\n          loadPlugins.push(loadPlugin)\n        })\n      }\n    })\n\n    return loadPlugins\n  }\n\n  getCmDomEventHandlerMap(): CmDomEventHandlerMap {\n    const cmDomEventHandlerMap: CmDomEventHandlerMap = {}\n    this.plugins.forEach((plugin) => {\n      if (plugin.cmDomEventHandlerMap) {\n        Object.assign(cmDomEventHandlerMap, plugin.cmDomEventHandlerMap)\n      }\n    })\n\n    return cmDomEventHandlerMap\n  }\n\n  getCmExtensions(): CmExtension[] {\n    const exts: CmExtension[] = []\n    this.plugins.forEach((plugin) => {\n      if (plugin.cmExtensions) {\n        exts.splice(exts.length - 1, 0, plugin.cmExtensions)\n      }\n    })\n\n    return exts\n  }\n\n  getCmMarkdownConfig(): object {\n    const config = {}\n    this.plugins.forEach((plugin) => {\n      if (plugin.cmMarkdownConfig) {\n        Object.assign(config, plugin.cmMarkdownConfig)\n      }\n    })\n\n    return config\n  }\n\n  cmDocChanged(doc: string): void {\n    this.plugins.forEach((plugin) => {\n      plugin?.cmDocChanged?.(doc)\n    })\n  }\n\n  getCommandMap(): CommandMap {\n    const commandMap: CommandMap = {}\n    this.plugins.forEach((plugin) => {\n      if (plugin.commandMap) {\n        Object.assign(commandMap, plugin.commandMap)\n      }\n    })\n\n    return commandMap\n  }\n\n  getExtraVnodes(): UnwrapNestedRefs<VNode[]> {\n    const vnodes: VNode[] = []\n    this.plugins.forEach((plugin) => {\n      if (plugin.extraVnodes) {\n        plugin.extraVnodes.forEach((vnode) => {\n          vnodes.push(vnode)\n        })\n      }\n    })\n\n    return reactive<VNode[]>(vnodes)\n  }\n}"]}