{"version":3,"file":"CustomLinkAttrsPlugin.js","sourceRoot":"","sources":["CustomLinkAttrsPlugin.ts"],"names":[],"mappings":"AAMA;;GAEG;AACH,MAAM,qBAAqB;IACzB,eAAe,CAAkB;IAEjC,YAAY,iBAAoC;QAC9C,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QACzB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBACnD,iBAAiB;aAClB,CAAC,CAAC,CAAA;IACL,CAAC;IAED,mBAAmB,CAAC,EAAO,EAAE,OAAY;QACvC,MAAM,mBAAmB,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS;YACnD,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;YACrD,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAA;QAC/C,MAAM,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAA;QAEnD,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAM;SACP;QAED,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,GAAG,UAAU,MAAa,EAAE,GAAW,EAAE,OAAY,EAAE,GAAQ,EAAE,IAAS;YACnG,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;YACzB,MAAM,YAAY,GAAG,MAAM,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,KAAK,MAAM,IAAI,MAAM,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,KAAK,YAAY,CAAA;YAEnG,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAuB,CAAA;YAC9C,MAAM,UAAU,GAAqB,EAAE,CAAA;YACvC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAmB,EAAE,EAAE;gBACvC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnB,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnB,UAAU,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;YACvB,CAAC,CAAC,CAAA;YACF,IAAI,YAAY,EAAE;gBAChB,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,OAAO,CAAA;aAC3C;YAED,MAAM,UAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAA;YAChD,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAA;YACjC,MAAM,QAAQ,GAAmB,EAAE,CAAA;YACnC,OAAO,UAAU,CAAC,KAAK,CAAA;YACvB,IAAI,UAAU,EAAE;gBACd,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE;oBAC5B,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;iBACtC;aACF;YACD,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAA;YAC/B,IAAI,YAAY,IAAI,QAAQ,IAAI,QAAQ,KAAK,UAAU,CAAC,KAAK,EAAE;gBAC7D,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,OAAO,GAAG,QAAQ,CAAA;aACnC;YAED,OAAO,mBAAmB,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;QAC7D,CAAC,CAAA;IACH,CAAC;CACF;AAED,SAAS,eAAe,CAAC,iBAAoC;IAC3D,OAAO,IAAI,qBAAqB,CAAC,iBAAiB,CAAC,CAAA;AACrD,CAAC;AAED,eAAe,eAAe,CAAA","sourcesContent":["import type { MditLoadPlugin, MditTokenAttrMap, MditTokenAttrs, MditTokenAttr } from '../CoreEditor/types'\nimport type { CorePlugin } from './CorePlugin'\n\n\nexport type FnCustomLinkAttrs = (oldAttrMap: MditTokenAttrMap) => MditTokenAttrMap\n\n/**\n * customize a link's attributes, like src, title, referer and so on.\n */\nclass CustomLinkAttrsPlugin implements CorePlugin {\n  mditLoadPlugins: MditLoadPlugin[]\n\n  constructor(fnCustomLinkAttrs: FnCustomLinkAttrs) {\n    this.mditLoadPlugins = []\n    this.mditLoadPlugins.push([this.mditCustomLinkAttrs, {\n      fnCustomLinkAttrs,\n    }])\n  }\n\n  mditCustomLinkAttrs(md: any, configs: any) {\n    const orgLinkOpenRenderer = md.renderer.rules.link_open \n        ? md.renderer.rules.link_open.bind(md.renderer.rules)\n        : md.renderer.renderToken.bind(md.renderer)\n    const fnCustomLinkAttrs = configs.fnCustomLinkAttrs\n\n    if (!fnCustomLinkAttrs) {\n      return\n    }\n\n    md.renderer.rules.link_open = function (tokens: any[], idx: number, options: any, env: any, self: any) {\n      const token = tokens[idx]\n      const isSimpleLink = tokens?.[idx + 1]?.type === 'text' && tokens?.[idx + 2]?.type === 'link_close'\n\n      const oldAttrs = token.attrs as MditTokenAttrs\n      const oldAttrMap: MditTokenAttrMap = {}\n      oldAttrs.forEach((attr: MditTokenAttr) => {\n        const key = attr[0]\n        const val = attr[1]\n        oldAttrMap[key] = val\n      })\n      if (isSimpleLink) {\n        oldAttrMap.title = tokens[idx + 1].content\n      }\n\n      const newAttrMap = fnCustomLinkAttrs(oldAttrMap)\n      const newTitle = newAttrMap.title\n      const newAttrs: MditTokenAttrs = []\n      delete newAttrMap.title\n      if (newAttrMap) {\n        for (const key in newAttrMap) {\n          newAttrs.push([key, newAttrMap[key]])\n        }\n      }\n      tokens[idx]['attrs'] = newAttrs\n      if (isSimpleLink && newTitle && newTitle !== oldAttrMap.title) {\n        tokens[idx + 1].content = newTitle\n      }\n\n      return orgLinkOpenRenderer(tokens, idx, options, env, self)\n    }\n  }\n}\n\nfunction customLinkAttrs(fnCustomLinkAttrs: FnCustomLinkAttrs) {\n  return new CustomLinkAttrsPlugin(fnCustomLinkAttrs)\n}\n\nexport default customLinkAttrs\n"]}