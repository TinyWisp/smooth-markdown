{"version":3,"file":"CustomCodeBlockRendererPlugin.js","sourceRoot":"","sources":["CustomCodeBlockRendererPlugin.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAA;AACtC,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,KAAK,CAAA;AAY1D;;GAEG;AACH,MAAM,6BAA6B;IACjC,mBAAmB,CAAqB;IACxC,gBAAgB,CAAkB;IAClC,UAAU,CAAa;IACvB,WAAW,CAA2B;IACtC,eAAe,CAAc;IAE7B,YAAY,gBAAkC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;QACxC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAA;QACpB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAU,EAAE,CAAC,CAAA;QACxC,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,IAAI,CAAC,CAAA;QAEhC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAC3C,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAA;QAC7B,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAA;QACxD,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,UAAU,GAAG,EAAE,CAAA;IACtB,CAAC;IAED,gBAAgB,CAAC,IAAY,EAAE,IAAY;QACzC,MAAM,EAAE,GAAG,MAAM,EAAE,CAAA;QAEnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,IAAI;YACJ,IAAI;YACJ,EAAE;SACH,CAAC,CAAA;QAEF,OAAO,YAAY,EAAE,UAAU,CAAA;IACjC,CAAC;IAED,eAAe;QACb,QAAQ,CAAC,GAAG,EAAE;YACZ,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;gBACnF,OAAM;aACP;YACD,MAAM,MAAM,GAAY,EAAE,CAAA;YAC1B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,CAAA;YACvD,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAA;QAChE,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,wBAAwB,CAAC,SAAoB;QAC3C,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAA;QAClG,MAAM,cAAc,GAAG,CAAC,CAAC,SAAS,EAAE;YAClC,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,MAAM;SACP,CAAC,CAAA;QACF,OAAO,CAAC,CAAC,QAAQ,EAAE;YACjB,EAAE,EAAE,IAAI,SAAS,CAAC,EAAE,EAAE;SACvB,EAAE,CAAC,cAAc,CAAC,CAAC,CAAA;IACtB,CAAC;CACF;AAED,SAAS,uBAAuB,CAAC,gBAAkC;IACjE,OAAO,IAAI,6BAA6B,CAAC,gBAAgB,CAAC,CAAA;AAC5D,CAAC;AAED,eAAe,uBAAuB,CAAA;AACtC,OAAO,EAAE,6BAA6B,EAAE,CAAA","sourcesContent":["import type { MditCodeRendererMap } from '../CoreEditor/types'\nimport type { CorePlugin } from './CorePlugin'\nimport type { Component, Ref, UnwrapNestedRefs, VNode } from 'vue'\nimport { uniqId } from '../utils/util'\nimport { nextTick, ref, reactive, Teleport, h } from 'vue'\n\nexport interface LangComponentMap {\n  [lang: string]: [Component, object?]\n}\n\nexport interface CodeBlock {\n  id: string\n  lang: string\n  code: string\n}\n\n/**\n * render a code block using a user defined component\n */\nclass CustomCodeBlockRendererPlugin implements CorePlugin {\n  mditCodeRendererMap: MditCodeRendererMap\n  langComponentMap: LangComponentMap\n  codeBlocks: CodeBlock[]\n  extraVnodes: UnwrapNestedRefs<VNode[]>\n  disableTeleport: Ref<boolean>\n\n  constructor(langComponentMap: LangComponentMap) {\n    this.langComponentMap = langComponentMap\n    this.codeBlocks = []\n    this.extraVnodes = reactive<VNode[]>([])\n    this.disableTeleport = ref(true)\n\n    const langs = Object.keys(langComponentMap)\n    this.mditCodeRendererMap = {}\n    langs.forEach((lang) => {\n      this.mditCodeRendererMap[lang] = this.mditCodeRenderer\n    })\n  }\n\n  mditBeforeRender() {\n    this.codeBlocks = []\n  }\n\n  mditCodeRenderer(code: string, lang: string): string {\n    const id = uniqId()\n\n    this.codeBlocks.push({\n      lang,\n      code,\n      id,\n    })\n\n    return `<pre id=\"${id}\"></pre>`\n  }\n\n  mditAfterRender() {\n    nextTick(() => {\n      if (this.codeBlocks.length === 0 || !document.getElementById(this.codeBlocks[0].id)) {\n        return\n      }\n      const vnodes: VNode[] = []\n      this.codeBlocks.forEach((codeBlock) => {\n        vnodes.push(this.renderCodeBlockComponent(codeBlock))\n      })\n      this.extraVnodes.splice(0, this.extraVnodes.length, ...vnodes)\n    })\n  }\n\n  renderCodeBlockComponent(codeblock: CodeBlock) {\n    const [component, config] = this.langComponentMap[codeblock.lang] ?? this.langComponentMap.default\n    const renderCompoent = h(component, {\n      lang: codeblock.lang,\n      code: codeblock.code,\n      config,\n    })\n    return h(Teleport, {\n      to: `#${codeblock.id}`,\n    }, [renderCompoent])\n  }\n}\n\nfunction customCodeBlockRenderer(langComponentMap: LangComponentMap): CorePlugin {\n  return new CustomCodeBlockRendererPlugin(langComponentMap)\n}\n\nexport default customCodeBlockRenderer\nexport { CustomCodeBlockRendererPlugin }"]}