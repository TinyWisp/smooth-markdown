{"version":3,"file":"HandleImageClickPlugin.js","sourceRoot":"","sources":["HandleImageClickPlugin.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;AAWlD;;GAEG;AACH,MAAM,sBAAsB;IAC1B,MAAM,CAAa;IACnB,mBAAmB,CAAqB;IACxC,YAAY,CAAwB;IAEpC,YAAY,YAAoC;QAC9C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;QAChB,IAAI,CAAC,mBAAmB,GAAG;YACzB,KAAK,EAAE,IAAI,CAAC,aAAa;SAC1B,CAAA;QACD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;IAClC,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;IAC3C,CAAC;IAED,aAAa,CAAC,MAAa,EAAE,GAAW;QACtC,MAAM,EAAE,GAAG,4BAA4B,MAAM,EAAE,EAAE,CAAA;QACjD,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAA;QAC/B,MAAM,OAAO,GAA4B,EAAE,CAAA;QAC3C,KAAK,CAAC,OAAO,CAAC,CAAC,IAAW,EAAE,EAAE;YAC5B,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;gBACpB,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnB,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnB,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;aACnB;QACH,CAAC,CAAC,CAAA;QACF,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAA;QACvB,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAA;QAC/B,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,GAAG,CAAA;QAClC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;QAElC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACf,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;SACpB,CAAC,CAAA;QAEF,UAAU,CAAC,GAAE,EAAE;YACb,MAAM,EAAE,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAA;YACtC,EAAE,IAAI,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,CAAA;YAC5C,CAAC,CAAC,CAAA;QACJ,CAAC,EAAE,CAAC,CAAC,CAAA;QAEL,OAAO,aAAa,UAAU,CAAC,GAAG,CAAC,UAAU,UAAU,CAAC,GAAG,CAAC,YAAY,UAAU,CAAC,KAAK,CAAC,SAAS,EAAE,2CAA2C,CAAA;IACjJ,CAAC;CACF;AAED,SAAS,sBAAsB,CAAC,YAAoC;IAClE,OAAO,IAAI,sBAAsB,CAAC,YAAY,CAAC,CAAA;AACjD,CAAC;AAED,eAAe,sBAAsB,CAAA","sourcesContent":["import type { MditRendererRuleMap } from '../CoreEditor/types'\nimport type { CorePlugin } from './CorePlugin'\nimport { uniqId, escapeHtml } from '../utils/util'\n\nexport interface ImageData {\n  src: string\n  alt: string\n  title: string\n  id: string\n}\n\nexport type ImageClickEventHandler = (images: ImageData[], idx: number, event: Event) => void\n\n/**\n * execute an user defined function, when the user clicks an image in the view.\n */\nclass HandleImageClickPlugin implements CorePlugin {\n  images: ImageData[]\n  mditRendererRuleMap: MditRendererRuleMap\n  fnImageClick: ImageClickEventHandler\n\n  constructor(fnImageClick: ImageClickEventHandler) {\n    this.images = []\n    this.mditRendererRuleMap = {\n      image: this.imageRenderer\n    }\n    this.fnImageClick = fnImageClick\n  }\n\n  mditBeforeRender(): void {\n    this.images.splice(0, this.images.length)\n  }\n\n  imageRenderer(tokens: any[], idx: number): string {\n    const id = `image_click_event_plugin_${uniqId()}`\n    const attrs = tokens[idx].attrs\n    const attrMap: {[key: string]: string} = {}\n    attrs.forEach((item: any[]) => {\n      if (item.length >= 2) {\n        const key = item[0]\n        const val = item[1]\n        attrMap[key] = val\n      }\n    })\n    const src = attrMap.src\n    const alt = tokens[idx].content\n    const title = attrMap.title ?? alt\n    const counter = this.images.length\n\n    this.images.push({\n      src, alt, title, id\n    })\n\n    setTimeout(()=>{\n      const el = document.getElementById(id)\n      el && el.addEventListener('click', (e) => {\n        this.fnImageClick(this.images, counter, e)\n      })\n    }, 0)\n\n    return `<img src=\"${escapeHtml(src)}\" alt=\"${escapeHtml(alt)}\" title=\"${escapeHtml(title)}\" id=\"${id}\" class=\"svme-plugin-handle-image-click\">`\n  }\n}\n\nfunction handleImageClickPlugin(fnImageClick: ImageClickEventHandler) {\n  return new HandleImageClickPlugin(fnImageClick)\n}\n\nexport default handleImageClickPlugin"]}