{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Ref } from 'vue'\nimport type { PluginSimple as MditPluginSimple, PluginWithOptions as MditPluginWithOptions, PluginWithParams as MditPluginWithParams} from 'markdown-it'\n\n// ---------------- types related to markdown-it  -------------------\n\nexport type MditCodeRenderer = (code: string, lang: string) => string\n\nexport interface MditCodeRendererMap {\n  [key: string]: MditCodeRenderer\n}\n\nexport type MditRendererRule = (tokens: any[], idx: number, options?: object, env?: object, slf?: object) => string\n\nexport interface MditRendererRuleMap {\n  [key: string]: MditRendererRule\n}\n\nexport type MditPlugin = MditPluginSimple | MditPluginWithOptions | MditPluginWithParams\n\nexport type MditLoadPlugin = [MditPlugin, object] | [MditPlugin]\n\nexport interface MditInitOptions {\n  [key: string]: any\n}\n\nexport type MditTokenAttr = [string, string]\n\nexport type MditTokenAttrs = MditTokenAttr[]\n\nexport type MditTokenAttrMap = {\n  [key: string]: string\n}\n\n\n// ------------------ types related to codemirror -------------------\n\nexport type CmDomEventHandlerMap = {\n  [key: string]: (event: Event) => void\n}\n\nexport type CmDocChanged = (doc: string) => void\n\n// ------------------------------------------------------------------\n\nexport interface CoreContext {\n  methods: {\n    [key: string]: Function\n  },\n  doms: {\n    [key: string]: Ref<HTMLElement | null>\n  },\n  props: {\n    [key: string]: any\n  },\n}\n\nexport type Command = (cmd: string, params: object) => void\n\nexport interface CommandMap {\n  [key: string]: Command\n}\n\nexport type FnUpload = (file: File) => string | Promise<string>"]}